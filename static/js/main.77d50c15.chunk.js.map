{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filteredTitle","selectedStatus","handleChange","event","target","value","name","setState","searchedTodos","todo","title","includes","selectedByStatus","completed","this","props","todos","selectUser","changeStatus","filteredTodos","filter","className","placeholder","onChange","map","key","id","classNames","type","readOnly","checked","onClick","userId","React","PureComponent","request","url","options","fetch","then","response","ok","Error","json","result","data","CurrentUser","selectedUser","loadData","prevProps","user","email","phone","App","selectedUserId","todoId","prevState","length","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.77d50c15.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.PureComponent {\n    state = {\n      filteredTitle: '',\n      selectedStatus: '',\n    }\n\n    handleChange = (event) => {\n      const { value, name } = event.target;\n\n      this.setState({\n        [name]: value,\n      });\n    }\n\n    searchedTodos = (todo) => {\n      if (todo.title === null) {\n        return todo.title;\n      }\n\n      return todo.title.includes(this.state.filteredTitle);\n    }\n\n    selectedByStatus = (todo) => {\n      if (this.state.selectedStatus === 'completed') {\n        return todo.completed;\n      }\n\n      if (this.state.selectedStatus === 'active') {\n        return !todo.completed;\n      }\n\n      return todo;\n    }\n\n    render() {\n      const { todos, selectUser, changeStatus } = this.props;\n\n      const { filteredTitle, selectedStatus } = this.state;\n\n      const filteredTodos = todos\n        .filter(this.searchedTodos).filter(this.selectedByStatus);\n\n      return (\n        <div className=\"TodoList\">\n          <h2>Todos:</h2>\n          <form>\n            <div>\n              <input\n                name=\"filteredTitle\"\n                value={filteredTitle}\n                placeholder=\"Filter\"\n                onChange={this.handleChange}\n              />\n            </div>\n\n            <div>\n              <select\n                name=\"selectedStatus\"\n                value={selectedStatus}\n                onChange={this.handleChange}\n              >\n                <option value=\"all\">All</option>\n                <option value=\"active\">Active</option>\n                <option value=\"completed\">Completed</option>\n              </select>\n            </div>\n\n          </form>\n\n          <div className=\"TodoList__list-container\">\n            <ul className=\"TodoList__list\">\n              {filteredTodos.map(todo => (\n                <li\n                  key={todo.id}\n                  className={classNames('TodoList__item', {\n                    'TodoList__item--checked': todo.completed,\n                    'TodoList__item--unchecked': !todo.completed,\n                  })}\n                >\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      readOnly\n                      checked={todo.completed}\n                      onClick={() => changeStatus(todo.id)}\n                    />\n                    <p>{todo.title}</p>\n                  </label>\n\n                  <button\n                    className=\"TodoList__user-button button\n                  TodoList__user-button--selected\"\n                    type=\"button\"\n                    onClick={() => {\n                      selectUser(todo.userId);\n                    }}\n                  >\n                    {`User #${todo.userId}`}\n                  </button>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      );\n    }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw Error;\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getTodo = todoId => request(`/todos/${todoId}`);\nexport const getUsers = () => request('/users');\nexport const getUser = userId => request(`/users/${userId}`);\n\nexport const post = (url, data) => request(`/todos`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\n// modify\nexport const patch = (url, data) => request(`/todos`, {\n  method: 'PATCH',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const updateTodo = (todoId, title) => patch(`/todos/${todoId}`, { title });\n\nexport const createTodo = title => post('/todos', {\n  userId: 1,\n  completed: false,\n  title,\n});\n\n// delete\nexport const remove = url => request(url, { method: 'DELETE' });\nexport const deleteTodo = todoId => remove(`/todos/${todoId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  loadData() {\n    getUser(this.props.userId)\n      .then(user => this.setState({\n        selectedUser: user,\n      }));\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {selectedUser.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n        <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n    state = {\n      todos: [],\n      selectedUserId: 0,\n    };\n\n    componentDidMount() {\n      getTodos()\n        .then((todos) => {\n          this.setState({ todos });\n        });\n    }\n\n    selectUser = (userId) => {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n\n    changeStatus = (todoId) => {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ((todo.id === todoId)\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : { ...todo })),\n      }));\n    }\n\n    render() {\n      const { todos, selectedUserId } = this.state;\n\n      return (\n        <div className=\"App\">\n          {todos.length > 0 && (\n            <div className=\"App__sidebar\">\n              <TodoList\n                todos={todos}\n                selectedUserId={selectedUserId}\n                selectUser={this.selectUser}\n                changeStatus={this.changeStatus}\n              />\n            </div>\n          )}\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser userId={selectedUserId} />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}