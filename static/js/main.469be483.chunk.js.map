{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filteredTitle","selectedStatus","handleChange","event","target","value","name","setState","searchedTodos","todo","title","includes","selectedByStatus","completed","this","props","todos","selectUser","changeStatus","selectedUserId","filteredTodos","filter","className","placeholder","onChange","map","key","id","classNames","type","readOnly","checked","onClick","userId","React","PureComponent","request","url","options","fetch","then","response","ok","Error","status","statusText","json","result","data","CurrentUser","selectedUser","loadData","prevProps","user","deleteUser","email","phone","App","todoId","prevState","length","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.469be483.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    filteredTitle: '',\n    selectedStatus: '',\n  }\n\n  handleChange = (event) => {\n    const { value, name } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  searchedTodos = (todo) => {\n    if (todo.title === null) {\n      return todo.title;\n    }\n\n    return todo.title.includes(this.state.filteredTitle);\n  }\n\n  selectedByStatus = (todo) => {\n    if (this.state.selectedStatus === 'completed') {\n      return todo.completed;\n    }\n\n    if (this.state.selectedStatus === 'active') {\n      return !todo.completed;\n    }\n\n    return todo;\n  }\n\n  render() {\n    const { todos, selectUser, changeStatus, selectedUserId } = this.props;\n\n    const { filteredTitle, selectedStatus } = this.state;\n\n    const filteredTodos = todos\n      .filter(this.searchedTodos).filter(this.selectedByStatus);\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form>\n          <div>\n            <input\n              name=\"filteredTitle\"\n              value={filteredTitle}\n              placeholder=\"Filter\"\n              onChange={this.handleChange}\n            />\n          </div>\n\n          <div>\n            <select\n              name=\"selectedStatus\"\n              value={selectedStatus}\n              onChange={this.handleChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </div>\n\n        </form>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {filteredTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--checked': todo.completed,\n                  'TodoList__item--unchecked': !todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                    onClick={() => changeStatus(todo.id)}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected': todo.userId === selectedUserId,\n                  })}\n                  onClick={() => {\n                    selectUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      userId: PropTypes.number,\n      title: PropTypes.string,\n      completed: PropTypes.bool,\n    }),\n  ).isRequired,\n  selectUser: PropTypes.func.isRequired,\n  changeStatus: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","const BASE_URL = 'https://mate-api.herokuapp.com';\n\nexport const request = (url, options) => fetch(`${BASE_URL}${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    return response.json();\n  })\n  .then(result => result.data);\n\nexport const getTodos = () => request('/todos');\nexport const getTodo = todoId => request(`/todos/${todoId}`);\nexport const getUsers = () => request('/users');\nexport const getUser = userId => request(`/users/${userId}`);\n\nexport const post = (url, data) => request(`/todos`, {\n  method: 'POST',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\n// modify\nexport const patch = (url, data) => request(`/todos`, {\n  method: 'PATCH',\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n  body: JSON.stringify(data),\n});\n\nexport const updateTodo = (todoId, title) => patch(`/todos/${todoId}`, { title });\n\nexport const createTodo = title => post('/todos', {\n  userId: 1,\n  completed: false,\n  title,\n});\n\n// delete\nexport const remove = url => request(url, { method: 'DELETE' });\nexport const deleteTodo = todoId => remove(`/todos/${todoId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport { getUser } from '../../api/api';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    selectedUser: {},\n  }\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.loadData();\n    }\n  }\n\n  loadData() {\n    getUser(this.props.userId)\n      .then(user => this.setState({\n        selectedUser: user,\n      }));\n  }\n\n  render() {\n    const { selectedUser } = this.state;\n    const { deleteUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {selectedUser.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{selectedUser.name}</h3>\n        <p className=\"CurrentUser__email\">{selectedUser.email}</p>\n        <p className=\"CurrentUser__phone\">{selectedUser.phone}</p>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => {\n            deleteUser();\n          }}\n        >\n          Delete\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  deleteUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodos()\n      .then((todos) => {\n        this.setState({ todos });\n      });\n  }\n\n  selectUser = (userId) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  deleteUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  }\n\n  changeStatus = (todoId) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ((todo.id === todoId)\n        ? {\n          ...todo, completed: !todo.completed,\n        }\n        : { ...todo })),\n    }));\n  }\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        {todos.length > 0 && (\n          <div className=\"App__sidebar\">\n            <TodoList\n              todos={todos}\n              selectedUserId={selectedUserId}\n              selectUser={this.selectUser}\n              changeStatus={this.changeStatus}\n            />\n          </div>\n        )}\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                deleteUser={this.deleteUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}